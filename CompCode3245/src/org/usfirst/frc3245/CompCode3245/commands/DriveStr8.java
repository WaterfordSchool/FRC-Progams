// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3245.CompCode3245.commands;
<<<<<<< HEAD
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.RobotDrive;
=======
>>>>>>> refs/remotes/origin/joslin
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.interfaces.Gyro;

import org.usfirst.frc3245.CompCode3245.Robot;
<<<<<<< HEAD
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import org.usfirst.frc3245.CompCode3245.RobotMap;
import edu.wpi.first.wpilibj.Timer;
=======
import org.usfirst.frc3245.CompCode3245.RobotMap;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;




>>>>>>> refs/remotes/origin/joslin


/**
 *
 */
public class DriveStr8 extends Command {
<<<<<<< HEAD
	
	private static final double Kp = 0;
	RobotDrive myDrive;
	TalonSRX frontLeft, rearLeft, frontRight, rearRight;
	private RobotDrive myRobot;
=======
	final double kAngleSetpoint = 0.0;
 	final double kP = 0.005; // proportional turning constant
 	// gyro calibration constant, may need to be adjusted;
 	// gyro value of 360 is set to correspond to one full revolution
 	final double kVoltsPerDegreePerSecond = 0.0128;
>>>>>>> refs/remotes/origin/joslin

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStr8() {
    	
    	double Kp = 0.03;
    	
    	AnalogGyro gyro = new AnalogGyro(1);
    	RobotDrive myRobot = new RobotDrive(1,2); //CHANGE bc this is for Jauguars
    	myRobot.setExpiration(0.10);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
       


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
<<<<<<< HEAD
    protected void initialize() {
    	
    		AnalogGyro gyro = null; //Don't know what this means
			gyro.reset();

	while (isAutonomous()) {
		
		double angle = gyro.getAngle(); //get current heading
	
		
		RobotDrive myRobot = null; 
		myRobot.drive(-1.0, -angle*Kp);//drive towards heading 0
		
		Timer.delay(0.004);
		
	}
=======
    public void initialize() {
>>>>>>> refs/remotes/origin/joslin
    	
    	myRobot.drive(0.0, 0.0);
    	

    }
<<<<<<< HEAD
 private boolean isAutonomous() {
		// TODO Auto-generated method stub
		return false;
	}

// Called repeatedly when this Command is scheduled to run
    protected void execute() {
=======
 // Called repeatedly when this Command is scheduled to run
    public void execute() {
>>>>>>> refs/remotes/origin/joslin
    	Robot.driveTrain.drive(Robot.oi.getDriver());
    	
		double turningValue = (kAngleSetpoint - RobotMap.driveTrainGyro1.getAngle()) * kP;
		// Invert the direction of the turn if we are going backwards
		turningValue = Math.copySign(turningValue, Robot.oi.getDriver().getY());
		RobotMap.driveTrainTDrive.tankDrive(0.5+turningValue/2, 0.5-turningValue/2);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
